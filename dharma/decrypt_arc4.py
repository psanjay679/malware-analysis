from arc4 import ARC4
import binascii
import sys
from VMPC import VMPC
# import ida_name


def arc4_decrypt(data, key):
    arc4 = ARC4(key)
    decrypted_data = arc4.decrypt(data)
    return decrypted_data

def vmpc_decrypt(first_decrypted_data, offset_val, data_size, iv):

    data_start = offset_val - 0x40E080
    data_end = data_start + data_size
    arc4_key = first_decrypted_data[:0x80]
    encrypted_data = first_decrypted_data[data_start:data_end]

    cipher = VMPC(arc4_key)
    plaintext = cipher.crypt(encrypted_data, iv)
    return plaintext

def double_decrypt_arc4(first_decrypted_data, offset_val, data_size):
    data_start = offset_val - 0x40E080
    data_end = data_start + data_size
    arc4_key = first_decrypted_data[:0x80]
    encrypted_data = first_decrypted_data[data_start:data_end]
    return arc4_decrypt(encrypted_data, arc4_key).replace(b'\x00', b'')
    
def get_radable_names(decrypted_data):
    base_addr = 'dword_0040E53E'

with open('dharma.bin', 'rb') as f:
    data = f.read()
    arc4_key = data[0xCA00:0xCA80]
    arc4_data = data[0xCA80:0xCA80 + 0xA13C]
    decrypted_data = arc4_decrypt(arc4_data, arc4_key)

    arc4_key = decrypted_data[:0x80]
    arc4_data = decrypted_data[27964:27964+0x80]

    while True:
        x = int(input(), 0x10)

        # print(double_decrypt_arc4(decrypted_data, 0x412140, 7))
        # print(double_decrypt_arc4(decrypted_data, 0x4175BC, 0x100))
        # print(double_decrypt_arc4(decrypted_data, x, 0x100))
        print(double_decrypt_arc4(decrypted_data, x, 0x100))


    # _data_ = double_decrypt_arc4(decrypted_data, 0x412250, 256)
    # _data_ = _data_.replace(b'\x00', b'')
    # print(_data_)
    # arc4_data = decrypted_data[1214:1214 + 0x5DA]
    # arc4_data = decrypted_data[1214:]

    # decrypted_data = arc4_decrypt(arc4_data, arc4_key)
    # # decrypted_data = decrypted_data.split(b'\x00')
    # # print(decrypted_data)
    # base_addr = 0x004186B8
    # decrypted_data = decrypted_data.replace(b'\x00', b'')
    # print(decrypted_data)

    

    # print('Hello, IDC')
    # # sys.exit(1)

    # # decrypted_data = 
    # dll_name = None
    # for library in decrypted_data:
    #     library = ''.join(chr(x) for x in library)
    #     if not library:
    #         continue
    #     if '.dll' in library:
    #         dll_name = library
    #     else:
    #         library_addr = f'dword_{"%08x" % base_addr}'
    #         ida_name.set_name(base_addr, f'{dll_name}_{library}', ida_name.SN_CHECK)
    #         # idc.MakeName(;ibrary_addr, f'{dll_name}_{library}')
    #         # print (f'[{library_addr}]: {dll_name}_{library}')
    #         base_addr += 4

    # # for library in decrypted_data[1:]:
    # #     if b'dll' not in library:
    # #         library_addr = f'dword_{"%08x" % base_addr}'
    # #         print (f'[{library_addr}]: {library}')
    # #         base_addr += 4
    # #     else:
    # #         break

    

    # for dll in decrypted_data:
    #     print(f'[dll_name]: {dll}')
    # # print(decrypted_data)
